//给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。 
//
// 
//
// 示例 1: 
//
// 
//输入: num = 38
//输出: 2 
//解释: 各位相加的过程为：
//38 --> 3 + 8 --> 11
//11 --> 1 + 1 --> 2
//由于 2 是一位数，所以返回 2。
// 
//
// 示例 2: 
//
// 
//输入: num = 0
//输出: 0 
//
// 
//
// 提示： 
//
// 
// 0 <= num <= 2³¹ - 1 
// 
//
// 
//
// 进阶：你可以不使用循环或者递归，在 O(1) 时间复杂度内解决这个问题吗？ 
//
// Related Topics数学 | 数论 | 模拟 
//
// 👍 690, 👎 0bug 反馈 | 使用指南 | 更多配套插件 
//
//
//
//


package leetcode.editor.cn;

/**
 * 各位相加
 * @author ambrose
 * @date 2024-09-23 09:22:56
 */
public class P0258_AddDigits{
	 public static void main(String[] args) {
	 	 //测试代码
	 	 Solution solution = new P0258_AddDigits().new Solution();
	 }
	 
//力扣代码
//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
/*	数字根（Digital Root）是数学中一个有趣的概念，通常用于描述一个数字的各个位数相加，反复进行，直到结果是个位数的过程。这个个位数就是这个数字的数字根。

	计算数字根的过程：
	将一个数的所有位上的数字相加。
	如果得到的结果是一个一位数，则这个数就是数字根。
	如果得到的结果是两位数或更大的数，则重复步骤 1，直到得到一个一位数。
	例子：
	例子 1：计算 38 的数字根：

			38 -> 3 + 8 = 11
			11 -> 1 + 1 = 2 因此，38 的数字根是 2。
	例子 2：计算 12345 的数字根：

			12345 -> 1 + 2 + 3 + 4 + 5 = 15
			15 -> 1 + 5 = 6 因此，12345 的数字根是 6。
	数字根的数学公式：
	数字根有一个简单的数学公式，可以快速计算而无需反复相加。这个公式是基于模 9 运算：
	数字根=1+(num−1)%9
	当 num == 0 时，数字根是 0。
	当 num % 9 == 0 且 num ≠ 0 时，数字根是 9。
	公式的解释：
	这个公式的核心是数字根与模 9 运算之间的联系。在对数字做逐位相加时，结果实际上相当于将该数字按 9 进行取模运算。所以，数字根实际上是 num % 9，但是有一个特殊情况：如果 num 是 9 的倍数，数字根应为 9，而不是 0。

	总结：
	数字根是一个数字的所有位数相加，直到得到一位数为止。
	可以通过数学公式在 O(1) 时间内计算数字根，避免使用循环或递归。*/
    public int addDigits(int num) {
		return num == 0 ? 0 : 1 + (num - 1) % 9;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}
